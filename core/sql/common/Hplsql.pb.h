// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hplsql.proto

#ifndef PROTOBUF_Hplsql_2eproto__INCLUDED
#define PROTOBUF_Hplsql_2eproto__INCLUDED

#include <string>

#undef _MSC_VER
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace hplsql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Hplsql_2eproto();
void protobuf_AssignDesc_Hplsql_2eproto();
void protobuf_ShutdownFile_Hplsql_2eproto();

class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string sql = 1;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 1;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  
  // @@protoc_insertion_point(class_scope:hplsql.Request)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* sql_;
  static const ::std::string _default_sql_;
  friend void  protobuf_AddDesc_Hplsql_2eproto();
  friend void protobuf_AssignDesc_Hplsql_2eproto();
  friend void protobuf_ShutdownFile_Hplsql_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 sqlcode = 1;
  inline bool has_sqlcode() const;
  inline void clear_sqlcode();
  static const int kSqlcodeFieldNumber = 1;
  inline ::google::protobuf::int32 sqlcode() const;
  inline void set_sqlcode(::google::protobuf::int32 value);
  
  // required string sqlstate = 2;
  inline bool has_sqlstate() const;
  inline void clear_sqlstate();
  static const int kSqlstateFieldNumber = 2;
  inline const ::std::string& sqlstate() const;
  inline void set_sqlstate(const ::std::string& value);
  inline void set_sqlstate(const char* value);
  inline void set_sqlstate(const char* value, size_t size);
  inline ::std::string* mutable_sqlstate();
  
  // required string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:hplsql.Response)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 sqlcode_;
  ::std::string* sqlstate_;
  static const ::std::string _default_sqlstate_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_Hplsql_2eproto();
  friend void protobuf_AssignDesc_Hplsql_2eproto();
  friend void protobuf_ShutdownFile_Hplsql_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required string sql = 1;
inline bool Request::has_sql() const {
  return _has_bit(0);
}
inline void Request::clear_sql() {
  if (sql_ != &_default_sql_) {
    sql_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Request::sql() const {
  return *sql_;
}
inline void Request::set_sql(const ::std::string& value) {
  _set_bit(0);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void Request::set_sql(const char* value) {
  _set_bit(0);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void Request::set_sql(const char* value, size_t size) {
  _set_bit(0);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_sql() {
  _set_bit(0);
  if (sql_ == &_default_sql_) {
    sql_ = new ::std::string;
  }
  return sql_;
}

// -------------------------------------------------------------------

// Response

// required int32 sqlcode = 1;
inline bool Response::has_sqlcode() const {
  return _has_bit(0);
}
inline void Response::clear_sqlcode() {
  sqlcode_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Response::sqlcode() const {
  return sqlcode_;
}
inline void Response::set_sqlcode(::google::protobuf::int32 value) {
  _set_bit(0);
  sqlcode_ = value;
}

// required string sqlstate = 2;
inline bool Response::has_sqlstate() const {
  return _has_bit(1);
}
inline void Response::clear_sqlstate() {
  if (sqlstate_ != &_default_sqlstate_) {
    sqlstate_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Response::sqlstate() const {
  return *sqlstate_;
}
inline void Response::set_sqlstate(const ::std::string& value) {
  _set_bit(1);
  if (sqlstate_ == &_default_sqlstate_) {
    sqlstate_ = new ::std::string;
  }
  sqlstate_->assign(value);
}
inline void Response::set_sqlstate(const char* value) {
  _set_bit(1);
  if (sqlstate_ == &_default_sqlstate_) {
    sqlstate_ = new ::std::string;
  }
  sqlstate_->assign(value);
}
inline void Response::set_sqlstate(const char* value, size_t size) {
  _set_bit(1);
  if (sqlstate_ == &_default_sqlstate_) {
    sqlstate_ = new ::std::string;
  }
  sqlstate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_sqlstate() {
  _set_bit(1);
  if (sqlstate_ == &_default_sqlstate_) {
    sqlstate_ = new ::std::string;
  }
  return sqlstate_;
}

// required string message = 3;
inline bool Response::has_message() const {
  return _has_bit(2);
}
inline void Response::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Response::message() const {
  return *message_;
}
inline void Response::set_message(const ::std::string& value) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value, size_t size) {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_message() {
  _set_bit(2);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hplsql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Hplsql_2eproto__INCLUDED
